.TH "GIT\-ABC" "1" "2020-03-23" "" "Local man page"
.nh
.ad l
.SH "NAME"
git-abc \- Find and manage backport candidates
.SH "SYNOPSIS"
.sp
.nf
\fIgit abc\fR find [<upstream> [<downstream>]] [[--] <path>...]
\fIgit abc\fR list|list-fixes [<option>] [<upstream> [<downstream>]]
\fIgit abc\fR pick-list [<upstream> [<downstream>]]
\fIgit abc\fR select [<option>] [<upstream> [<downstream>]]
\fIgit abc\fR flag <flag-option> <commit>...
\fIgit abc\fR reject <commit>...
\fIgit abc\fR accept <commit>...
\fIgit abc\fR defer <commit>...
\fIgit abc\fR set-upstream <downstream-commit> <upstream-commit>
\fIgit abc\fR set-upstream-range [<downstream-range> [<upstream-range>]]
\fIgit abc\fR get-upstream <downstream-commit>
\fIgit abc\fR get-downstream <upstream-commit>
\fIgit abc\fR reset [--force]
\fIgit abc\fR import [<file>]
\fIgit abc\fR export
\fIgit abc\fR get-config [<upstream> [<downstream>]] [[--] <path>...]
.fi
.SH "DESCRIPTION"
A Backporter's Companion (ABC) aids developers with finding commits in a fast paced project (upstream) that should be backported to a slower paced fork (downstream).
git-abc's goal is to provide developers with an easy and efficient workflow by wrapping \fBgit-log\fR(1) up with some additional filtering and logic into simple commands and by maintaining the selection state (accept/reject) of backport candidates.
All state is stored in the git repository using \fBgit-notes\fR(1).
.SH "SUBCOMMANDS"
.PP
find [<upstream> [<downstream>]] [[--] <path>...]
.RS 4
Find backport candidates in <upstream> related to files in <path>...
Any upstream commits already backported will be linked to their downstream commits when the downstream commits have upstream-links (see CONFIGURATION:abc.upstream-link).
When not provided, <upstream> defaults to the abc.upstream configuration setting and <downstream> defaults to abc.downstream.
When the configuration settings are not set, then upstream defaults to <branch-of-<downstream>>@{upstream}, if it exists, and downstream defaults to HEAD.
<path>... defaults to all files.
.sp
The <upstream>, <downstream>, and <path>... parameters may also be provided with ABC_UPSTREAM, ABC_DOWNSTREAM, and ABC_PATHS environment variables.
When both a command line parameter and an environment variable are provided, the command line parameter takes precedence.
.sp
Three hooks (see HOOKS) may be used with find: abc-pre-find, abc-post-find, and abc-ignore-evil-merge.
.sp
To speed it up, as well as other git-abc commands, it's recommended to enable core.commitGraph (see \fBgit-config\fR(1) and git document technical/commit-graph.txt).
Also, don't forget to create the initial commit-graph file with 'git commit-graph write'.
.RE
.PP
list|list-fixes [<options>] [<upstream> [<downstream>]]
.RS 4
.nf
Options specify which commits to list and how to present them.
.fi
.sp
\'list' can display backport candidates (--candidates), deferred backport candidates (--deferred), pending backports (--pending), commits rejected for backport (--rejected), commits that are downstream only (--downstream-only), all commits already backported (--backported), just commits already backported that were non-trivial (--backported-non-trivial), or just commits already backported that were cherry picks (--backported-cherry-picks).
When none of these options is given, defaults to listing backport candidates.
.sp
In addition, options --reverse, --pretty, --oneline and --format are used as in 'git log'.  If no format is specified, 'list' shows commit hashes together with the first line of the commit message and highlights interesting commits (e.g. possible fixes, see CONFIGURATION:abc.should-highlight) when the color.ui configuration setting is true.
.sp
<upstream> and <downstream> have the same defaults as 'find'.
.sp
Note, 'list' only lists commits previously found with 'find', which means <upstream> and <downstream> should bind the same range, or subrange, of the ones used with 'find' and that the search limiting <path>'s used with 'find' also limit what is listed.
.sp
When the 'list-fixes' variant is used, only the "interesting" commits are output.
.RE
.PP
pick-list [<upstream> [<downstream>]]
.RS 4
List the pending backports, like 'list --pending', but output the list in a \fBgit-cherry-pick\fR(1) friendly way, i.e. only the commit hashes and in reverse order.
.RE
.PP
select [<option>] [<upstream> [<downstream>]]
.RS 4
.nf
where <option> is one of the following
--show-deferred|--show-dropped|--show-picked|--show-all
.fi
.sp
Run an interactive session to make selection decisions about the candidates previously found with 'find'.
Only backport candidates are shown when 'select' is used without options.
The options --show-deferred, --show-dropped, and --show-picked may be used to also show respectively deferred candidates, rejected candidates, and pending backports.
The option --show-all specifies all of them.
Each commit's ABC flag is used to determine its suggested action: \(cqview' for a backport candidate (or deferred candidate), 'drop' for a commit rejected for backport, and 'pick' for a pending backport.
The suggested action is 'VIEW' (capitalized 'view') when the commit looks like an interesting commit, e.g. a possible fix.
.sp
<upstream> and <downstream> have the same defaults as 'find' and, like 'list', the commits presented depend on the parameters provided to limit the search done by 'find'.
.RE
.PP
flag <--pending|--candidate|--deferred|--rejected> <commit>...
.RS 4
Flag <commit>('s) as pending backport(s), backport candidate(s), deferred backport candidate(s), or commit(s) rejected for backport.
.RE
.PP
reject <commit>...
.RS 4
This is an alias for 'flag --rejected'
.RE
.PP
accept <commit>...
.RS 4
This is an alias for 'flag --pending'
.RE
.PP
defer <commit>...
.RS 4
This is an alias for 'flag --deferred'
.sp
Deferred backport candidates are normal candidates, except they don't appear in the candidates' listings.
Deferring candidates allows one to reduce the candidate list to a more manageable length without needing to make all decisions at once.
.RE
.PP
set-upstream <downstream-commit> <upstream-commit>
.RS 4
If a commit shows up in 'list --downstream-only', which does have a corresponding upstream commit, then this command allows the linkage to be manually applied.
If this command is needed frequently, then, either the backports were done from a different upstream than what was specified with 'find', or there are problems with the upstream-link expression (see CONFIGURATION:abc.upstream-link) or with the backports not getting upstream links added to their commit messages.
.sp
Note, even when the upstream link is missing, wrong, or points to a commit in a different upstream tree, downstream commits with equivalent upstream commits will still be found and linked automatically when abc.hunt-cherries is true (see CONFIGURATION:abc.hunt-cherries).
See \fBgit-cherry\fR(1) and \fBgit-patch-id\fR(1) for what defines equivalence.
.RE
.PP
set-upstream-range [<downstream-range> [<upstream-range>]]
.RS 4
When a downstream range is known to have commits with upstream-links, then this command can be used to quickly set the upstream linkage of each commit in the range.
.sp
If <downstream-range> is not provided then it defaults to '{downstream}..',  where {downstream} is the same as what would be selected for <downstream> of the 'find' command when it's not provided.
.sp
If <upstream-range> is provided, then range checking will be enabled, even if abc.range-checks is false (see CONFIGURATION:abc.range-checks), and each linkage will be checked against the given upstream range.
set-upstream-range may take much more time to complete when given an upstream range.
To speed it up, as well as other git-abc commands, it's recommended to enable core.commitGraph (see \fBgit-config\fR(1) and git document technical/commit-graph.txt).
Also, don't forget to create the initial commit-graph file with 'git commit-graph write'.
.sp
When true, abc.hunt-cherries (see CONFIGURATION:abc.hunt-cherries) will enable cherry-pick searching, just as it does for the 'find' command.
However 'find' should be run first with the upstream that should be searched for the potential cherry-picks.
.RE
.PP
get-upstream <downstream-commit>
.RS 4
Output the corresponding upstream commit for <downstream-commit>.
.RE
.PP
get-downstream <upstream-commit>
.RS 4
Output the corresponding downstream commit for <upstream-commit>.
If the downstream commit is not already known by git-abc then 'get-downstream' will search for it by checking all the commits on the downstream branch for an upstream link containing the given upstream commit.
If the downstream commit is found, then the linkage is stored within the current namespace in order to speed up the next lookup.
.RE
.PP
reset [--force]
.RS 4
Clear all ABC flags.
--force or -f forces clearing without a final "are you sure?" prompting.
.RE
.PP
import [<file>]
.RS 4
Import flag settings from <file>, if given, otherwise from stdin.
.RE
.PP
export
.RS 4
Export flag settings to stdout.
.RE
.PP
get-config [<upstream> [<downstream>]] [[--] <path>...]
.RS 4
Display the configuration variables determined from the environment and git configuration.
The {upstream} and {downstream} displayed are the same as would be selected with the other commands such as 'find' and 'list' when given the same input.
The configuration is output with shell quoting, ready to be import to the callers environment.
.RE
.SH "HOOKS"
.PP
Hooks are programs you can place in a hooks directory to trigger actions at certain points in git’s execution (see \fBgithooks\fR(5)).
Hooks that don’t have the executable bit set are ignored.
The default hooks directory for git-abc is \fB$GIT_DIR/hooks\fR, but that can be changed via the abc.hook-path configuration variable (see CONFIGURATION:abc.hook-path).
git-abc changes its current working directory to the root of the working tree, so all hooks are executed from there.
Additionally, all hooks are started with all git-abc configuration environment variables (see ENVIRONMENT) set with the current configuration.
Hooks may also get their input from command-line arguments and stdin.
See the documentation for each hook below for details.
.RE
.PP
abc-pre-find
.RS 4
This hook runs once right before 'find' is run.
abc-pre-find does not take any command-line arguments, nor read from stdin.
abc-pre-find exits with zero (0) when it successful completes.
If abc-pre-find exits with a non-zero exit code, then it failed, and 'find' will be aborted.
This hook is good for preparing the upstream and downstream branches for 'find'.
.RE
.PP
abc-post-find
.RS 4
This hook runs once right after 'find' is run.
abc-post-find does not take any command-line arguments, nor read from stdin.
abc-post-find exits with zero (0) when it successful completes and non-zero otherwise.
This hook is good for immediately rejecting candidate commits that are known to be unwanted.
.RE
.PP
abc-ignore-evil-merge
.RS 4
This hook runs once for each file containing "evil" changes of an "evil" merge (see \fBgitglossary\fR(7):\fBevil merge\fR).
abc-ignore-evil-merge does not read from stdin, but it takes four command line arguments, which are:
.sp
.nf
    commit:     The full commit hash of the "evil" merge commit
    their_file: The file name of the "their" side of the merge where the "evil" change was made
    our_file:   The file name of the "our" side of the merge where the "evil" change was made
    flags:      Either "r", "a", or "ra", where "r" means there are "evil" removals, "a" means
                there are "evil" additions, and "ra" means there are both
.fi
.sp
If the exit code is zero (0), then the "evil" merge may be ignored.
If the exit code is non-zero, then, either the hook failed, or the "evil" merge cannot be ignored.
In either non-zero exit code case, git-abc will not ignore the "evil" merge.
This hook is good for eliminating merge commits from the candidate list that are known to be safe.
For example, if the "evil" changes are only whitespace.
.sp
Sample hook scripts are in the hooks directory of the git-abc git repository.
.RE
.SH CONFIGURATION
.PP
abc.upstream
.RS 4
The upstream revision pointer, see \fBgitrevisions\fR(7).
.sp
The ABC_UPSTREAM environment variable may be used to override this config.
.RE
.PP
abc.downstream
.RS 4
The downstream revision pointer, see \fBgitrevisions\fR(7).
.sp
The ABC_DOWNSTREAM environment variable may be used to override this config.
.RE
.PP
abc.namespace
.RS 4
The name of the namespace to use.
The name may not contain '/'.
(Internally this name will be prefixed with refs/notes/ and used as a \fBgit-notes\fR(1) ref.) The default is 'git-abc'
.sp
The ABC_NAMESPACE environment variable may be used to override this config.
.RE
.PP
abc.should-highlight
.RS 4
Double comma (,,) separated list of <place-holders>:<regex> pairs used to identify interesting commits, e.g. possible fixes.
<place-holders> are git pretty format place holders (see \fBgit-log\fR(1) PRETTY FORMATS).
When listing commits, each commit will have each set of place holders checked with its extended regular expression <regex>.
If there's a match, then the commit is highlighted as an interesting commit.
The default is:
.sp
.nf
  '%s:[Ff]ix|FIX|^Revert ,,%(trailers:key=Cc):^<?[Ss]table\>,,%(trailers:key=Fixes,key=Fix):.'
.fi
.sp
The ABC_SHOULD_HIGHLIGHT environment variable may be used to override this config.
.RE
.PP
abc.upstream-link
.RS 4
Double comma (,,) separated list of <place-holders>:<regex> pairs used to identify upstream links, which are references embedded in downstream commits that point to their corresponding upstream commits.
<place-holders> are git pretty format place holders (see \fBgit-log\fR(1) PRETTY FORMATS).
When looking for a corresponding upstream commit, the downstream commit will have each set of place holders checked with its extended regular expression <regex>.
If there's a match, then the match is used for the upstream link.
The upstream link must be the first match, i.e. '\1'.
The default is:
.sp
.nf
  '%b:^\\(cherry picked from commit ([0-9a-f]{40})\\)$,,%b:^commit ([0-9a-f]{40})$'
.fi
.sp
The ABC_UPSTREAM_LINK environment variable may be used to override this config.
.RE
.PP
abc.hunt-cherries
.RS 4
Try harder to find cherry-picks, including ones that have missing or malformed upstream links, or that have upstream links pointing to commits in a different tree than has been specified as <upstream>.
This is expensive to do, so it's off ('false') by default.
To enable, set to 'true'.
.sp
The ABC_HUNT_CHERRIES environment variable may be used to override this config.
.RE
.PP
abc.range-checks
.RS 4
Ensure commits are members of their expected commit ranges (i.e. they're on the upstream or downstream branches).
Error out on unexpected user input and warn on unexpected upstream links.
This defaults to enabled ('true') when core.commitGraph (see \fBgit-config\fR(1) and git document technical/commit-graph.txt) is enabled, and defaults to 'false' otherwise.
These checks are a bit expensive to do.
When speed is more important, the checks may be disabled by setting this config to 'false'.
.sp
The ABC_RANGE_CHECKS environment variable may be used to override this config.
.RE
.PP
abc.todo-path
.RS 4
The path of the directory to create (if it doesn't already exist) and use for the todo file needed when editing the backport candidate list with 'select'.
The default is:
.sp
.nf
  "$GIT_DIR/git-abc-todo"
.fi
.sp
The ABC_TODO_PATH environment variable may be used to override this config.
.RE
.PP
abc.hook-path
.RS 4
The path of the directory where the git-abc hooks (see HOOKS) reside.
The default is:
.sp
.nf
  "$GIT_DIR/hooks"
.fi
.sp
The ABC_HOOK_PATH environment variable may be used to override this config.
.RE
.SH "ENVIRONMENT"
.nf
ABC_NAMESPACE
ABC_TODO_PATH
ABC_HOOK_PATH
ABC_SHOULD_HIGHLIGHT
ABC_UPSTREAM_LINK
ABC_HUNT_CHERRIES
ABC_RANGE_CHECKS
ABC_UPSTREAM
ABC_DOWNSTREAM
ABC_PATHS
.fi
