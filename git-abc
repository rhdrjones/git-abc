#!/bin/bash
#
# git-abc - A Backporter's Companion (ABC)
#           Find and manage backport candidates
#
# Copyright (c) 2017 Red Hat, Inc.
#
# Authors:
#   Andrew Jones <drjones@redhat.com>
#
# This work is licensed under the MIT License. Please see the LICENSE
# file or http://opensource.org/licenses/MIT.
#

# shellcheck disable=SC2034
{
SUBDIRECTORY_OK=true
USAGE="<subcommand> [<options>]"
LONG_USAGE="Find and manage backport candidates

  git abc find [<upstream> [<downstream>]] [[--] <path>...]
  git abc list|list-fixes [<option>] [<upstream> [<downstream>]]
  git abc pick-list [<upstream> [<downstream>]]
  git abc select [<option>] [<upstream> [<downstream>]]
  git abc flag <flag-option> <commit>...
  git abc reject <commit>...
  git abc accept <commit>...
  git abc defer <commit>...
  git abc set-upstream <downstream-commit> <upstream-commit>
  git abc set-upstream-range [<downstream-range>] [<upstream-range>]
  git abc get-upstream <downstream-commit>
  git abc get-downstream <upstream-commit>
  git abc reset [--force]
  git abc import [<file>]
  git abc export
  git abc get-config [<upstream> [<downstream>]] [[--] <path>...]

  See 'git help abc'
"
}
# shellcheck disable=SC1090
. "$(git --exec-path)/git-sh-setup"
require_work_tree
cd_to_toplevel
set_reflog_action abc

die_error() { echo -n "Error: " >&2; die "$1"; }
warn() { say "Warning: $1" >&2; }

abc_abbrev_min=7
if ! abc_abbrev="$(git config --get --type int core.abbrev)"; then
	abc_abbrev=$abc_abbrev_min
fi

abc_H() { if (( ${#1} == 40 )); then echo "$1"; else git log -n1 --pretty=%H "$1"; fi; }
abc_h() { if (( ${#1} >= abc_abbrev )); then echo "${1:0:$abc_abbrev}"; else git log -n1 --pretty=%h "$1"; fi; }
abc_rev_verify() { git rev-parse --verify -q "$1" >/dev/null; }
abc_is_ancestor() { git merge-base --is-ancestor "$1" "$2"; } # is "$1" an ancestor of "$2"
abc_commit_in_range() { ! abc_is_ancestor "$1" "$2" && abc_is_ancestor "$1" "$3"; }
abc_patch_id() { local commit=$1 id; read -r id commit <<<"$(git show "$1" | git patch-id --stable)"; echo "$id"; }
abc_is_cherry() { [[ "$(abc_patch_id "$1")" == "$(abc_patch_id "$2")" ]]; }

unset abc_merge_base
abc_set_merge_base() { abc_merge_base=$(abc_h "$(git merge-base "$1" "$2")"); }

#
# Input parsing and validation
#

abc_bool() { git -c abc.not-a-config="$1" config --get --type bool abc.not-a-config 2>/dev/null; }

abc_color="$(abc_bool 'false')"
test -t 1 && abc_color=$(git config --get-colorbool color.ui 'true')

ABC_DEFAULT_SHOULD_HIGHLIGHT="%s:[Ff]ix|FIX|^Revert ,,%(trailers:key=Cc):^<?[Ss]table\>,,%(trailers:key=Fixes,key=Fix):."
ABC_DEFAULT_UPSTREAM_LINK="%b:^\(cherry picked from commit ([0-9a-f]{40})\)$,,%b:^commit ([0-9a-f]{40})$"
ABC_DEFAULT_NAMESPACE="git-abc"
# shellcheck disable=SC2154
ABC_DEFAULT_TODO_PATH="$GIT_DIR/git-abc-todo"
ABC_DEFAULT_HOOK_PATH="$GIT_DIR/hooks"
ABC_DEFAULT_HUNT_CHERRIES="$(abc_bool 'false')"
ABC_DEFAULT_RANGE_CHECKS="$(git config --get --type bool core.commitGraph || abc_bool 'false')"

# Set the parameters that can't / don't need to be validated. Environment overrides git config.
: "${ABC_SHOULD_HIGHLIGHT:=$(git config --get abc.should-highlight)}"
: "${ABC_UPSTREAM_LINK:=$(git config --get abc.upstream-link)}"
: "${ABC_SHOULD_HIGHLIGHT:=$ABC_DEFAULT_SHOULD_HIGHLIGHT}"
: "${ABC_UPSTREAM_LINK:=$ABC_DEFAULT_UPSTREAM_LINK}"

#
# Set and validate input parameters or set defaults for anything not set.
#

abc_set_parameter()
{
	local param_env="$1"
	local defval="$2"
	local param_git="$3"
	local git_config="$4"
	local type="$5"

	unset abc_parameter

	if [[ "${!param_env}" ]]; then
		abc_parameter="$param_env='${!param_env}'"
	elif [[ "$param_git" ]] && $git_config >&/dev/null; then
		eval "$param_env=$($git_config)"
		abc_parameter="$param_git='${!param_env}'"
		if [[ "$type" == 'bool' ]] && [[ ! "${!param_env}" ]]; then
			eval "$param_env=$(git config --get --type bool "$param_git")"
			return
		fi
	fi

	if test -v abc_parameter && [[ "$type" == 'bool' ]]; then
		if ! abc_bool "${!param_env}" >&/dev/null; then
			die_error "$abc_parameter is not boolean"
		else
			eval "$param_env=$(abc_bool "${!param_env}")"
		fi
	elif ! test -v abc_parameter && [[ "$defval" ]]; then
		eval "$param_env=$defval"
		abc_parameter="'$defval'"
	fi
}

abc_set_parameter 'ABC_NAMESPACE' "$ABC_DEFAULT_NAMESPACE" \
		  'abc.namespace' 'git config --get abc.namespace'
if [[ "$ABC_NAMESPACE" =~ [[:blank:]] || "$ABC_NAMESPACE" =~ '/' ]]; then
	die_error "$abc_parameter may not contain spaces or '/'"
fi

abc_set_parameter 'ABC_TODO_PATH' "$ABC_DEFAULT_TODO_PATH" \
		  'abc.todo-path' 'git config --get --type path abc.todo-path'
if test -e "$ABC_TODO_PATH" && test ! -d "$ABC_TODO_PATH"; then
	die_error "$abc_parameter is not a directory"
fi

abc_set_parameter 'ABC_HOOK_PATH' "$ABC_DEFAULT_HOOK_PATH" \
		  'abc.hook-path' 'git config --get --type path abc.hook-path'
if test -e "$ABC_HOOK_PATH" && test ! -d "$ABC_HOOK_PATH"; then
	die_error "$abc_parameter is not a directory"
fi

abc_set_parameter 'ABC_HUNT_CHERRIES' "$ABC_DEFAULT_HUNT_CHERRIES" \
		  'abc.hunt-cherries' 'git config --get abc.hunt-cherries' \
		  'bool'

abc_set_parameter 'ABC_RANGE_CHECKS' "$ABC_DEFAULT_RANGE_CHECKS" \
		  'abc.range-checks' 'git config --get abc.range-checks' \
		  'bool'

abc_check_commit_graph()
{
	if [[ "$(git config --get --type bool core.commitGraph)" != 'true' ]]; then
		warn "core.commitGraph is not enabled. Range checks may be slow."
		say "Enable with 'git config core.commitGraph true && git commit-graph write'" >&2
	fi
}

abc_set_revisions()
{
	local upstream=$1 downstream=$2
	local upstream_parameter downstream_parameter
	local branch

	if [[ ! "$upstream" ]]; then
		abc_set_parameter 'ABC_UPSTREAM' '' \
				  'abc.upstream' 'git config --get abc.upstream'
		if [[ "$ABC_UPSTREAM" ]] && ! abc_rev_verify "$ABC_UPSTREAM"; then
			die_error "$abc_parameter is not a valid revision"
		elif [[ "$ABC_UPSTREAM" ]]; then
			upstream_parameter=$abc_parameter
		fi
	else
		ABC_UPSTREAM="$upstream"
		upstream_parameter="'$upstream'"
	fi

	if [[ ! "$downstream" ]]; then
		abc_set_parameter 'ABC_DOWNSTREAM' 'HEAD' \
				  'abc.downstream' 'git config --get abc.downstream'
		if ! abc_rev_verify "$ABC_DOWNSTREAM"; then
			die_error "$abc_parameter is not a valid revision"
		fi
		downstream_parameter=$abc_parameter
	else
		ABC_DOWNSTREAM="$downstream"
		downstream_parameter="'$downstream'"
	fi

	if [[ ! "$ABC_UPSTREAM" ]]; then
		if (( "$(git branch --contains "$ABC_DOWNSTREAM" | wc -l)" != 1 )); then
			# No branch or too many branches to guess from. We can't guess.
			die "Can't guess upstream from $downstream_parameter. Please specify."
		fi
		branch="$(git branch --contains "$ABC_DOWNSTREAM" | awk '{print$2}')"
		ABC_UPSTREAM="${branch}@{upstream}"
		if ! git rev-parse "$ABC_UPSTREAM" >&/dev/null; then
			die "No upstream configured for branch '$branch' of $downstream_parameter. Please specify."
		fi
	fi

	if [[ "$(git rev-parse "$ABC_UPSTREAM")" == "$(git rev-parse "$ABC_DOWNSTREAM")" ]]; then
		echo "upstream:$upstream_parameter and downstream:$downstream_parameter match. Nothing to do."
		exit
	fi

	if [[ "$ABC_RANGE_CHECKS" == 'true' ]]; then
		abc_check_commit_graph
		abc_set_merge_base "$ABC_UPSTREAM" "$ABC_DOWNSTREAM"
	fi
}

# Validate and set [<upstream> [<downstream>]] [[--] <path>...]
abc_get_limits()
{
	local upstream downstream

	if [[ "$1" ]] && [[ "$1" != '--' ]] && abc_rev_verify "$1"; then
		upstream=$1
		shift
		if [[ "$1" ]] && [[ "$1" != '--' ]] && abc_rev_verify "$1"; then
			downstream=$1
			shift
		elif [[ "$2" == '--' ]]; then
			die_error "'$1' is not a valid downstream revision"
		fi
	elif [[ "$2" == '--' ]] || [[ "$3" == '--' ]]; then
		die_error "'$1' is not a valid upstream revision"
	fi
	if [[ "$1" == '--' ]]; then
		shift
	fi
	if [[ "$1" ]]; then
		ABC_PATHS="$*"
	fi

	abc_set_revisions "$upstream" "$downstream"
}

abc_get_config()
{
	abc_get_limits "$@"

	printf 'ABC_NAMESPACE=%q\n'		"$ABC_NAMESPACE"
	printf 'ABC_TODO_PATH=%q\n'		"$ABC_TODO_PATH"
	printf 'ABC_HOOK_PATH=%q\n'		"$ABC_HOOK_PATH"
	printf 'ABC_SHOULD_HIGHLIGHT=%q\n'	"$ABC_SHOULD_HIGHLIGHT"
	printf 'ABC_UPSTREAM_LINK=%q\n'		"$ABC_UPSTREAM_LINK"
	printf 'ABC_HUNT_CHERRIES=%q\n'		"$ABC_HUNT_CHERRIES"
	printf 'ABC_RANGE_CHECKS=%q\n'		"$ABC_RANGE_CHECKS"
	printf 'ABC_UPSTREAM=%q\n'		"$ABC_UPSTREAM"
	printf 'ABC_DOWNSTREAM=%q\n'		"$ABC_DOWNSTREAM"
	printf 'ABC_PATHS=%q\n'			"$ABC_PATHS"
}

abc_export_config()
{
	export ABC_NAMESPACE ABC_UPSTREAM ABC_DOWNSTREAM ABC_PATHS
	export ABC_SHOULD_HIGHLIGHT ABC_UPSTREAM_LINK
	export ABC_HUNT_CHERRIES ABC_RANGE_CHECKS
	export ABC_TODO_PATH ABC_HOOK_PATH
}

#
# abc flag functions
#

abc_flag_str()
{
	case "$1" in
	ABC_BACKPORT_PENDING)		echo 'pending';;
	ABC_BACKPORT_CANDIDATE)		echo 'candidate';;
	ABC_BACKPORT_XCANDIDATE)	echo 'xcandidate';;
	ABC_DEFERRED_CANDIDATE)		echo 'deferred-candidate';;
	ABC_DONT_WANT)			echo 'rejected';;
	ABC_ONLY_DOWNSTREAM)		echo 'downstream-only';;
	ABC_DOWNSTREAM=*)		echo 'backported';;
	ABC_UPSTREAM=*)			echo 'downstream';;
	ABC_CHERRYPICK=*)		echo 'downstream';;
	*)				echo "Unknown:$1";;
	esac
}
abc_get_flag_str() { abc_flag_str "$1" "$(abc_get_flag "$commit")"; }

abc_set_flag()
{
	# All flags are mutually exclusive, so we always overwrite whatever
	# was set before when setting a new one.
	local commit=$1 flag=$2
	git notes add -f -m "$flag" "$commit" 2>/dev/null
}

abc_get_flag() { git notes show "$1" 2>/dev/null; }
abc_is_downstream_only() { [[ "$(abc_get_flag "$1")" == 'ABC_ONLY_DOWNSTREAM' ]]; }

abc_in_base()
{
	local commit=$1
	[[ ! "$ABC_UPSTREAM" || ! "$ABC_DOWNSTREAM" ]] && abc_set_revisions
	[[ ! "$abc_merge_base" ]] && abc_set_merge_base "$ABC_UPSTREAM" "$ABC_DOWNSTREAM"
	abc_is_ancestor "$commit" "$abc_merge_base"
}

abc_flag_is_link() { [[ "$1" =~ '=' ]]; }
abc_has_link() { abc_flag_is_link "$(abc_get_flag "$1")"; }

abc_get_link()
{
	local commit=$1 link
	link=$(abc_get_flag "$commit") && link=${link/*=/}
	echo "$link"
	[[ "$link" ]]
}

abc_set_link()
{
	declare -u flag="ABC_$1"
	declare -l stream=$1
	local commit=$2 link=$3 old_flag old

	old_flag=$(abc_get_flag "$commit")
	old=${old_flag/*=/}

	if abc_flag_is_link "$old_flag" && [[ "$old" != "$link" ]]; then
		[[ "$stream" == 'cherrypick' ]] && stream="upstream"
		warn "Overwriting current $stream for '$(abc_h "$commit")' (was '$(abc_h "$old")', now '$(abc_h "$link")')"
	fi

	if [[ "$flag" == 'ABC_UPSTREAM' ]] && abc_is_cherry "$commit" "$link"; then
		flag=ABC_CHERRYPICK
	fi

	abc_set_flag "$commit" "$flag=$link"
}

abc_check_link() { [[ "$(abc_get_link "$1")" == "$2" ]]; }

abc_link_cherry()
{
	abc_set_link 'cherrypick' "$1" "$2"
	abc_set_link 'downstream' "$2" "$1"
}

abc_link()
{
	abc_set_link 'upstream' "$1" "$2"
	abc_set_link 'downstream' "$2" "$1"
}

#
# abc subcommands
#

abc_import()
{
	local fd flag commit link

	if [[ "$1" ]]; then
		if test ! -f "$1"; then
			die_error "File '$1' not found"
		fi
		exec {fd}<"$1"
	else
		fd=0
	fi

	while read -r -u "$fd" flag commit link; do
		case "$flag" in
		BP) abc_set_flag "$commit" ABC_BACKPORT_PENDING;;
		BC) abc_set_flag "$commit" ABC_BACKPORT_CANDIDATE;;
		XC) abc_set_flag "$commit" ABC_BACKPORT_XCANDIDATE;;
		DC) abc_set_flag "$commit" ABC_DEFERRED_CANDIDATE;;
		DW) abc_set_flag "$commit" ABC_DONT_WANT;;
		DO) abc_set_flag "$commit" ABC_ONLY_DOWNSTREAM;;
		US) abc_set_flag "$commit" "ABC_DOWNSTREAM=$link";;
		DS) abc_set_flag "$commit" "ABC_UPSTREAM=$link";;
		CP) abc_set_flag "$commit" "ABC_CHERRYPICK=$link";;
		*)  warn "Not importing unexpected flag $flag to commit $commit";;
		esac
	done
}

abc_export()
{
	local note commit flag

	git notes | while read -r note commit; do
		flag=$(git show "$note")
		case "$flag" in
		ABC_BACKPORT_PENDING)		echo "BP $commit";;
		ABC_BACKPORT_CANDIDATE)		echo "BC $commit";;
		ABC_BACKPORT_XCANDIDATE)	echo "XC $commit";;
		ABC_DEFERRED_CANDIDATE)		echo "DC $commit";;
		ABC_DONT_WANT)			echo "DW $commit";;
		ABC_ONLY_DOWNSTREAM)		echo "DO $commit";;
		ABC_DOWNSTREAM=*)		echo "US $commit ${flag#*=}";;
		ABC_UPSTREAM=*)			echo "DS $commit ${flag#*=}";;
		ABC_CHERRYPICK=*)		echo "CP $commit ${flag#*=}";;
		*)  warn "Not exporting unexpected flag $flag from commit $commit";;
		esac
	done
}

abc_reset()
{
	local ans

	if [[ "$1" ]]; then
		if [[ "$1" == '-f' ]] || [[ "$1" == '--force' ]]; then
			ans=yes
		else
			die_error "Unknown option '$1' passed to reset, not resetting"
		fi
	else
		echo "Are you sure you want to erase all backport selection history?"
		read -r -p "If so, type 'yes': " ans
	fi

	if [[ "$ans" != 'yes' ]]; then
		echo "Not resetting"
		return
	fi

	git notes | awk '{print$2}' | git notes remove --stdin 2>/dev/null
	git notes prune
}

abc_split_phs_re_pair()
{
	local _p=$1 _phs=$2 _re=$3 __phs __re _b

	[[ "${_p:1:1}" == '(' ]] && _b=')'
	__phs="${_p%%${_b}:*}${_b}" __re="${_p#*${_b}:}"

	if [[ "$__phs" =~ 'trailers' ]]; then
		if [[ "$__phs" =~ 'trailers:' ]]; then
			__phs=${__phs/)/,}
		else
			__phs=${__phs/)/:}
		fi
		__phs="${__phs}unfold,valueonly)"
	fi

	eval "$_phs=\"$__phs\" $_re=\"$__re\""
}

abc_should_highlight()
{
	local commit=$1 c="${ABC_SHOULD_HIGHLIGHT},,"
	local p phs re

	while [[ "$c" ]]; do
		p="${c%%,,*}" c="${c#*,,}"
		abc_split_phs_re_pair "$p" phs re

		if git log -n1 --pretty="$phs" "$commit" | grep -E -q "$re"; then
			return 0
		fi
	done
	return 1
}

abc_highlight()
{
	if [[ "$abc_color" == 'true' ]]; then
		echo -n -e "\e[33m$1\e[0m"
	else
		echo -n "$1"
	fi
}

abc_list()
{
	local range flag commit subject
	local list='--candidates'
	local format=''
	local reverse=''

	while [[ "$1" =~ ^- ]] && [[ "$1" != '--' ]]; do
		case "$1" in
		--candidates|--xcandidates|--deferred|--pending|--rejected| \
		--backported|--backported-non-trivial|--backported-cherry-picks| \
		--downstream-only) list=$1;;

		--oneline|--pretty|--pretty=*|--format=*) format=$1 ;;

		--reverse) reverse=$1 ;;
		*) die_error "Unknown option '$1' passed to list" ;;
		esac
		shift
	done

	abc_get_limits "$@"

	case "$list" in
	--candidates)			range="$ABC_DOWNSTREAM..$ABC_UPSTREAM" flag='ABC_BACKPORT_CANDIDATE\|^ABC_BACKPORT_XCANDIDATE';;
	--xcandidates)			range="$ABC_DOWNSTREAM..$ABC_UPSTREAM" flag=ABC_BACKPORT_XCANDIDATE;;
	--deferred)			range="$ABC_DOWNSTREAM..$ABC_UPSTREAM" flag=ABC_DEFERRED_CANDIDATE;;
	--pending)			range="$ABC_DOWNSTREAM..$ABC_UPSTREAM" flag=ABC_BACKPORT_PENDING;;
	--rejected)			range="$ABC_DOWNSTREAM..$ABC_UPSTREAM" flag=ABC_DONT_WANT;;
	--backported)			range="$ABC_UPSTREAM..$ABC_DOWNSTREAM" flag='ABC_UPSTREAM\|^ABC_CHERRYPICK';;
	--backported-non-trivial)	range="$ABC_UPSTREAM..$ABC_DOWNSTREAM" flag=ABC_UPSTREAM;;
	--backported-cherry-picks)	range="$ABC_UPSTREAM..$ABC_DOWNSTREAM" flag=ABC_CHERRYPICK;;
	--downstream-only)		range="$ABC_UPSTREAM..$ABC_DOWNSTREAM" flag=ABC_ONLY_DOWNSTREAM;;
	*) die_error "huh?" ;;
	esac

	# shellcheck disable=SC2086
	git log $reverse --notes --pretty='%h %s' --grep="^$flag" "$range" |
	while read -r commit subject; do
		if abc_should_highlight "$commit"; then
			if [ -z "$format" ]; then
				echo "$(abc_highlight "$commit") $subject"
				continue
			fi
		elif [[ "$ABC_ONLY_FIXES" == 'y' ]]; then
			continue
		fi

		if [ -z "$format" ]; then
			echo "$commit $subject"
		else
			git log -1 "$format" "$commit"
		fi
	done
}

abc_commit_range_check()
{
	local die stream commit range base tip msg

	if [[ "$1" == '--die' ]]; then
		die=1; shift
	fi

	stream=$1 commit=$2 range=$3

	if [[ "$range" ]]; then
		base="${range%%..*}"
		tip="${range#*..}"
	elif [[ "$ABC_RANGE_CHECKS" == 'true' ]]; then
		base=$abc_merge_base
		if [[ "$stream" == 'upstream' ]]; then
			tip=$ABC_UPSTREAM
		else
			tip=$ABC_DOWNSTREAM
		fi
	else
		return
	fi

	if ! abc_commit_in_range "$commit" "$base" "$tip"; then
		msg="'$(abc_h "$commit")' not in $stream range: ${base}..${tip}"
		if [[ "$die" ]]; then
			die_error "$msg"
		else
			say "$msg" >&2
		fi
	fi
}

abc_set_upstream()
{
	local downstream=$1 upstream=$2 current_upstream

	[[ "$downstream" && "$upstream" ]] || die_error "set-upstream requires two parameters: <downstream-commit> <upstream-commit>"
	abc_rev_verify "${downstream}^{commit}" || die_error "'$downstream' is not a valid commit"
	abc_rev_verify "${upstream}^{commit}" || die_error "'$upstream' is not a valid commit"

	abc_set_revisions
	abc_commit_range_check --die 'downstream' "$downstream"
	abc_commit_range_check --die 'upstream' "$upstream"

	abc_link "$(abc_H "$downstream")" "$(abc_H "$upstream")"
}

#
# Get each commit referenced by a given commit using a set of phs-re pairs.
#
abc_extract_commits()
{
	local commit=$1 c="${2},,"
	local p phs re m
	declare -a matches

	while [[ "$c" ]]; do
		p="${c%%,,*}" c="${c#*,,}"
		abc_split_phs_re_pair "$p" phs re

		readarray -t matches < <(git log -n1 --pretty="$phs" "$commit" | grep -E -o "$re" | sed -E "s/$re/\1/")

		for m in "${matches[@]}"; do
			abc_rev_verify "${m}^{commit}" 2>/dev/null && echo "$m"
		done
	done
}

abc_get_upstream_link()
{
	local commit=$1
	declare -a links

	readarray -t links < <(abc_extract_commits "$commit" "$ABC_UPSTREAM_LINK")

	if (( ${#links[@]} > 0 )); then
		echo "${links[0]}"
		return 0
	fi

	return 1
}

abc_get_upstream()
{
	local commit=$1 upstream

	[[ "$commit" ]] || die_error "get-upstream requires a parameter: <downstream-commit>"
	abc_rev_verify "${commit}^{commit}" || die_error "'$commit' is not a valid commit"
	abc_is_downstream_only "$commit" && die "'$commit' is downstream-only"

	abc_set_revisions

	if abc_in_base "$commit"; then
		echo "'$commit' is a shared base commit"
		return
	fi

	abc_commit_range_check --die 'downstream' "$commit"

	if upstream=$(abc_get_link "$commit"); then
		abc_check_link "$upstream" "$(abc_H "$commit")"
	elif upstream=$(abc_get_upstream_link "$commit"); then
		abc_link "$(abc_H "$commit")" "$(abc_H "$upstream")"
	else
		die "No upstream for '$commit' found"
	fi

	abc_commit_range_check 'upstream' "$upstream"

	git log -n1 --pretty='%h %s' "$upstream"
}

abc_search_for_downstream()
{
	local commit=$1 upstream downstream

	commit=$(abc_H "$commit")

	while read -r downstream; do
		if abc_is_downstream_only "$downstream"; then
			continue
		fi
		if upstream=$(abc_get_link "$downstream"); then
			abc_check_link "$upstream" "$downstream"
		elif upstream=$(abc_get_upstream_link "$downstream"); then
			upstream=$(abc_H "$upstream")
		fi
		if [[ "$upstream" == "$commit" ]]; then
			echo "$downstream"
			return 0
		fi
	done < <(git log --pretty=%H --grep "${commit:0:$abc_abbrev_min}" "$ABC_UPSTREAM..$ABC_DOWNSTREAM")

	return 1
}

abc_get_downstream()
{
	local commit=$1 downstream

	[[ "$commit" ]] || die_error "get-downstream requires a parameter: <upstream-commit>"
	abc_rev_verify "$commit^{commit}" || die_error "'$commit' is not a valid commit"

	abc_set_revisions

	if abc_in_base "$commit"; then
		echo "'$commit' is a shared base commit"
		return
	fi

	abc_commit_range_check --die 'upstream' "$commit"

	if downstream=$(abc_get_link "$commit"); then
		abc_check_link "$downstream" "$(abc_H "$commit")"
	elif downstream=$(abc_search_for_downstream "$commit"); then
		abc_link "$(abc_H "$downstream")" "$(abc_H "$commit")"
	else
		die "No downstream for '$commit' found"
	fi

	abc_commit_range_check 'downstream' "$downstream"

	git log -n1 --pretty='%h %s' "$downstream"
}

abc_set_downstream_only()
{
	commit=$1

	if [[ "$ABC_HUNT_CHERRIES" == 'true' ]]; then
		abc_set_flag "$commit" ABC_NEW_ONLY_DOWNSTREAM
	else
		abc_set_flag "$commit" ABC_ONLY_DOWNSTREAM
	fi
}

# When ABC_HUNT_CHERRIES is true, abc_hunt_cherries() should be called after
# setting new downstream-only commits to ensure all ABC_NEW_ONLY_DOWNSTREAM
# flags get converted to ABC_ONLY_DOWNSTREAM
abc_hunt_cherries()
{
	local range=$1 upstream_range=$2 commit upstream did uid
	declare -a new_downstream_only
	declare -A downstream_patchid

	# Any new downstream-only commits, that have matching upstream commits, were
	# likely cherry-picked from a different upstream tree, which was then later
	# merged to the specified upstream. We can fix up these commits automatically.
	# It's expensive to do, though, so require abc.hunt-cherries to be set true.
	if [[ "$ABC_HUNT_CHERRIES" != 'true' ]]; then
		return
	fi

	while read -r commit; do
		abc_set_flag "$commit" ABC_ONLY_DOWNSTREAM
		new_downstream_only+=("$commit")
		downstream_patchid[$commit]=$(abc_patch_id "$commit")
	done < <(git log --notes --pretty=%H --grep '^ABC_NEW_ONLY_DOWNSTREAM' "$range")

	if (( ${#new_downstream_only[@]} == 0 )); then
		return
	fi

	git log --notes --pretty=%H -E --grep '^(ABC_BACKPORT_CANDIDATE|ABC_BACKPORT_XCANDIDATE|ABC_DEFERRED_CANDIDATE|ABC_BACKPORT_PENDING|ABC_DONT_WANT)' "$upstream_range" |
	while read -r upstream; do
		uid=$(abc_patch_id "$upstream")
		for commit in "${new_downstream_only[@]}"; do
			did=${downstream_patchid[$commit]}
			if [[ "$did" == "$uid" ]]; then
				abc_link_cherry "$commit" "$upstream"
				break
			fi
		done
	done
}

abc_check_range()
{
	local range=$1
	declare -a revs

	if [[ ! "$range" =~ \.\. ]]; then
		die "fatal: no .. in range: '$range'"
	elif [[ "$range" =~ \.\.\. ]]; then
		die "Range ($range) cannot be a symmetric difference (...)"
	elif ! git rev-parse "$range" >&/dev/null; then
		die "'$range' is not a valid"
	fi
}

abc_set_upstream_range()
{
	local range=$1 upstream_range=$2 commit upstream
	local downstream_base downstream_tip upstream_base upstream_tip

	if [[ ! "$range" ]]; then
		abc_set_revisions
		downstream_base=$ABC_DOWNSTREAM
		downstream_tip='HEAD'
	else
		abc_check_range "$range"
		downstream_base="${range%%..*}"
		downstream_tip="${range#*..}"
		: "${downstream_base:=HEAD}"
		: "${downstream_tip:=HEAD}"
	fi

	if [[ ! "$upstream_range" ]]; then
		if [[ "$ABC_RANGE_CHECKS" == 'true' && "$range" ]]; then
			abc_set_revisions
		fi
		upstream_base=$abc_merge_base
		upstream_tip=$ABC_UPSTREAM
	else
		abc_check_range "$upstream_range"
		abc_check_commit_graph
		upstream_base="${upstream_range%%..*}"
		upstream_tip="${upstream_range#*..}"
		: "${upstream_base:=HEAD}"
		: "${upstream_tip:=HEAD}"
	fi

	range="${downstream_base}..${downstream_tip}"

	if [[ "$upstream_base" ]]; then
		upstream_range="${upstream_base}..${upstream_tip}"
		if abc_commit_in_range "$downstream_base" "$upstream_base" "$upstream_tip" ||
		   abc_commit_in_range "$downstream_tip" "$upstream_base" "$upstream_tip"; then
			die "Downstream range ($range) and upstream range ($upstream_range) overlap"
		fi
	fi

	git log --reverse --pretty=%H "$range" | while read -r commit; do
		if upstream=$(abc_get_link "$commit"); then
			abc_check_link "$upstream" "$commit"
		elif upstream=$(abc_get_upstream_link "$commit"); then
			upstream=$(abc_H "$upstream")
			abc_link "$commit" "$upstream"
		fi

		if [[ "$upstream" ]]; then
			abc_commit_range_check 'upstream' "$upstream" "$upstream_range"
		else
			abc_set_downstream_only "$commit"
		fi

		if [[ "$ABC_HUNT_CHERRIES" != 'true' ]] && abc_is_downstream_only "$commit"; then
			say "'$(abc_h "$commit")' is downstream-only" >&2
		fi
	done

	if [[ "$ABC_HUNT_CHERRIES" == 'true' ]]; then
		if [[ ! "$upstream_range" ]]; then
			[[ ! "$ABC_UPSTREAM" || ! "$ABC_DOWNSTREAM" ]] && abc_set_revisions
			upstream_range="${ABC_DOWNSTREAM}..${ABC_UPSTREAM}"
		fi
		abc_hunt_cherries "$range" "$upstream_range"
		git log --notes --pretty=%H --reverse "$range" --grep '^ABC_ONLY_DOWNSTREAM' |
		while read -r commit; do
			say "'$(abc_h "$commit")' is downstream-only" >&2
		done
	fi
}

abc_evil_merge()
{
	local commit=$1 line their_file our_file r a

	if ! git show --pretty=%H "$commit" -- $ABC_PATHS |
	   grep -E -v '^(\+\+\+|---) [ab]\/' | grep -E -q '^(\+\+|--)'; then
		return 1
	fi

	while IFS= read -r line; do
		if [[ "$line" =~ ^---\ [ab]/ ]]; then
			if [[ "$r" || "$a" ]]; then
				if ! test -x "$ABC_HOOK_PATH/abc-ignore-evil-merge" ||
				   ! "$ABC_HOOK_PATH/abc-ignore-evil-merge" "$commit" "$their_file" "$our_file" "$r$a"; then
					return 0
				fi
				unset r a
			fi
			their_file=${line:6}
			continue
		elif [[ "$line" =~ ^\+\+\+\ [ab]/ ]]; then
			our_file=${line:6}
			continue
		elif [[ "$line" =~ ^-- ]]; then
			r='r'
			continue
		elif [[ "$line" =~ ^\+\+ ]]; then
			a='a'
			continue
		fi
	done < <(git show --pretty=%H "$commit" -- $ABC_PATHS)

	if [[ "$r" || "$a" ]]; then
		if ! test -x "$ABC_HOOK_PATH/abc-ignore-evil-merge" ||
		   ! "$ABC_HOOK_PATH/abc-ignore-evil-merge" "$commit" "$their_file" "$our_file" "$r$a"; then
			return 0
		fi
	fi

	return 1
}

abc_find()
{
	local commit upstream parents

	abc_get_limits "$@"
	abc_export_config

	if test -x "$ABC_HOOK_PATH/abc-pre-find" && ! "$ABC_HOOK_PATH/abc-pre-find"; then
		say "abc-pre-find hook failed. Aborting find."
		return
	fi

	#
	# Link new downstream commits and double check downstream-only commits
	#
	git log --notes --no-merges --pretty=%H "${ABC_UPSTREAM}..${ABC_DOWNSTREAM}" --invert-grep --grep '^ABC_UPSTREAM\|^ABC_CHERRYPICK' -- $ABC_PATHS |
	while read -r commit; do
		if upstream=$(abc_get_upstream_link "$commit"); then
			upstream=$(abc_H "$upstream")
			abc_link "$commit" "$upstream"
			abc_commit_range_check 'upstream' "$upstream"
		else
			abc_set_downstream_only "$commit"
		fi
	done

	#
	# Flag new upstream commits
	#
	git log --notes --parents --pretty='%H %P' --invert-grep --grep ^ABC_ "${ABC_DOWNSTREAM}..${ABC_UPSTREAM}" -- $ABC_PATHS |
	while read -r commit parents; do
		# If this commit hasn't already been backported or flagged in some way, then
		# it's a candidate. However, if $parents has a space it means there's more than
		# one, and more than one parent means a merge. Most merges are clean -- the
		# changes that appear with 'git-show' come directly from one of the parents.
		# Those merges aren't interesting and so we automatically reject them.
		if [[ "$parents" =~ ' ' ]] && ! abc_evil_merge "$commit"; then
			abc_set_flag "$commit" ABC_DONT_WANT
			continue
		fi

		abc_set_flag "$commit" ABC_BACKPORT_CANDIDATE
	done

	abc_hunt_cherries "${ABC_UPSTREAM}..${ABC_DOWNSTREAM}" "${ABC_DOWNSTREAM}..${ABC_UPSTREAM}"

	if test -x "$ABC_HOOK_PATH/abc-post-find" && ! "$ABC_HOOK_PATH/abc-post-find"; then
		say "abc-post-find hook failed."
	fi
}

abc_flag()
{
	local flag=$1 commit current
	shift

	case "$flag" in
	--pending)	flag=ABC_BACKPORT_PENDING;;
	--candidate)	flag=ABC_BACKPORT_CANDIDATE;;
	--deferred)	flag=ABC_DEFERRED_CANDIDATE;;
	--rejected)	flag=ABC_DONT_WANT;;
	*)
		die_error "Unknown option '$flag' passed to flag"
		;;
	esac
	if [[ "$1" == '--' ]]; then
		shift
	fi

	[[ "$ABC_RANGE_CHECKS" == 'true' ]] && abc_set_revisions

	for commit in "$@"; do
		if ! abc_rev_verify "${commit}^{commit}"; then
			echo "Error: '$commit' is not a valid commit" >&2
			continue
		elif [[ "$ABC_RANGE_CHECKS" == 'true' ]] && ! abc_commit_in_range "$commit" "$abc_merge_base" "$ABC_UPSTREAM"; then
			echo "Error: '$commit' not in upstream range: ${abc_merge_base}..${ABC_UPSTREAM}" >&2
			continue
		fi

		if current=$(abc_get_flag "$commit"); then
			if [[ "$current" =~ 'ABC_DOWNSTREAM' ]]; then
				current=${current/*=/}
				warn "Overwriting current downstream for '$commit' (was '$(abc_h "$current")', now '$(abc_flag_str "$flag")')"
			elif [[ "$current" != 'ABC_BACKPORT_CANDIDATE' && "$current" != 'ABC_BACKPORT_XCANDIDATE' ]]; then
				warn "Overwriting current flag for '$commit' (was '$(abc_flag_str "$current")', now '$(abc_flag_str "$flag")')"
			fi
		fi

		abc_set_flag "$commit" "$flag"
	done
}

abc_select()
{
	local todo commit subject flag cmd i
	local show_deferred show_dropped show_picked
	local cmds=()

	while [[ "$1" ]]; do
		case "$1" in
		--show-deferred)	show_deferred=y;;
		--show-dropped)		show_dropped=y;;
		--show-picked)		show_picked=y;;
		--show-all)		show_deferred=y show_dropped=y show_picked=y;;
		--[[:alnum:]]*)		die "Invalid option $1";;
		*)
			break
			;;
		esac
		shift
	done
	abc_get_limits "$@"

	mkdir -p "$ABC_TODO_PATH"
	todo="$ABC_TODO_PATH/git-rebase-todo"

	if test -e "$todo"; then
		die "$todo exists. Complete current selection or remove."
	fi

	git log --notes --pretty='%h %s' --grep=^ABC_ "$ABC_DOWNSTREAM..$ABC_UPSTREAM" |
	while read -r commit subject; do
		flag=$(abc_get_flag "$commit")
		if [[ "$flag" == 'ABC_BACKPORT_CANDIDATE' || "$flag" == 'ABC_BACKPORT_XCANDIDATE' ||
		      ( "$show_deferred" && "$flag" == 'ABC_DEFERRED_CANDIDATE' ) ]]; then
			if abc_should_highlight "$commit"; then
				echo "VIEW $commit $subject" >> "$todo"
			else
				echo "view $commit $subject" >> "$todo"
			fi
		elif [[ "$show_dropped" && "$flag" == 'ABC_DONT_WANT' ]]; then
			echo "drop $commit $subject" >> "$todo"
		elif [[ "$show_picked" && "$flag" == 'ABC_BACKPORT_PENDING' ]]; then
			echo "pick $commit $subject" >> "$todo"
		fi
	done

	if test ! -e "$todo"; then
		die "No backport candidates found. Have you run git-abc find?"
	fi

	cat<<EOF >>"$todo"

# Select commits for backport
#
# Commands:
# p, pick = commit is accepted for backport
# d, drop = commit is rejected for backport
# c, cand = commit is reset as a candidate
# h, hide = commit is deferred
# s, skip = commit is left as is (i.e. its current flag is not changed)
# v, view = commit is left as is, but it's also selected for viewing
#
# If the view directive is given, then, after viewing, the user is
# prompted for a selection.
#
# If you remove a line here it's the same as setting it to skip.
EOF
	git_editor "$todo"

	mapfile cmds < <(awk '{if (!/^ *#/ && !/^ *$/) print $1" "$2}' "$todo" | tac)
	rm -f "$todo"
	rmdir --ignore-fail-on-non-empty "$ABC_TODO_PATH"

	for (( i = 0; i < ${#cmds[*]}; ++i )); do
		read -r cmd commit <<<"${cmds[i]}"
		case "$cmd" in
		P|p|Pick|pick|PICK) abc_set_flag "$commit" 'ABC_BACKPORT_PENDING';;
		D|d|Drop|drop|DROP) abc_set_flag "$commit" 'ABC_DONT_WANT';;
		C|c|Cand|cand|CAND) abc_set_flag "$commit" 'ABC_BACKPORT_CANDIDATE';;
		H|h|Hide|hide|HIDE) abc_set_flag "$commit" 'ABC_DEFERRED_CANDIDATE';;
		V|v|View|view|VIEW)
			git show "$commit"
			read -r -p "Backport (Pick/Drop/Cand/Hide/Skip)? " cmd
			while :; do
				case "$cmd" in
				P|p|Pick|pick)
					abc_set_flag "$commit" 'ABC_BACKPORT_PENDING'
					break;;
				D|d|Drop|drop)
					abc_set_flag "$commit" 'ABC_DONT_WANT'
					break;;
				C|c|Cand|cand)
					abc_set_flag "$commit" 'ABC_BACKPORT_CANDIDATE'
					break;;
				H|h|Hide|hide)
					abc_set_flag "$commit" 'ABC_DEFERRED_CANDIDATE'
					break;;
				S|s|Skip|skip)
					break;;
				*)
					read -r -p "Backport (Pick/Drop/Cand/Hide/Skip)? " cmd
					;;
				esac
			done
			;;
		*) ;; # Skip commit
		esac
	done
}

#
# main
#

export GIT_NOTES_REF="refs/notes/$ABC_NAMESPACE"
cmd=$1
shift
case "$cmd" in
find)				abc_find "$@";;
list)				abc_list "$@";;
list-fixes)			ABC_ONLY_FIXES=y abc_list "$@";;
pick-list)			abc_list --pending --pretty=%H --reverse "$@";;
select)				abc_select "$@";;
flag)				abc_flag "$@";;
reject)				abc_flag --rejected "$@";;
accept)				abc_flag --pending "$@";;
defer)				abc_flag --deferred "$@";;
set-upstream)			abc_set_upstream "$@";;
set-upstream-range)		abc_set_upstream_range "$@";;
get-upstream)			abc_get_upstream "$1";;
get-downstream)			abc_get_downstream "$1";;
reset)				abc_reset "$1";;
import)				abc_import "$1";;
export)				abc_export;;
get-config)			abc_get_config "$@";;
*)
	if command -v "git-abc-$cmd" >/dev/null; then
		exec "git-abc-$cmd" "$@"
	else
		"$0" -h
		exit 1
	fi
	;;
esac
